pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Douaesb/Ecolyzer.git', changelog: false, poll: false
                sh 'ls -la'  
            }
        }

        stage('Build') {
            steps {
                script {
                    dir('ecolyzer_backend') { 
                        sh 'chmod +x mvnw' 
                        sh './mvnw clean package -DskipTests' 
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('ecolyzer_backend') { 
                        sh 'docker --version' 
                        sh 'docker build -t app:latest .' 
                    }
                }
            }
        }

        // Uncomment if you want to run SonarLint
        // stage('SonarLint') {
        //     steps {
        //         script {
        //             dir('ecolyzer_backend') {
        //                 withSonarQubeEnv('SonarQube') {
        //                     sh './mvnw sonar:sonar' // Run SonarLint inside ecolyzer_backend
        //                 }
        //             }
        //         }
        //     }
        // }

       stage('Test Docker Login') {
           steps {
               script {
                   withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                       sh '''
                           echo "Testing Docker Login..."
                           echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin || exit 1
                       '''
                   }
               }
           }
       }


        stage('Deploy') {
            steps {
                script {
                    dir('ecolyzer_backend') { 
                        sh 'docker-compose down && docker-compose up -d'
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker resources...'
            sh 'docker system prune -f || true' 
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
